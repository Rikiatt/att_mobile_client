import { swalInputPass, swalNotification, swalToast } from '../utils/swal';
import { actionADB } from './adb.service';

export const typeText = async (data, setLoading) => {
  const text = await swalInputPass('Nh·∫≠p k√Ω t·ª±', '', 'Nh·∫≠p k√Ω t·ª± c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
  if (!text) return;
  setLoading(true);
  await actionADB({ action: 'input', device_id: data.device_id, text: text.trim() });
  setLoading(false);
};

export const enter = async (data) => {
  await actionADB({ action: 'enter', device_id: data.device_id });
};

export const home = async (data) => {
  await actionADB({ action: 'home', device_id: data.device_id });
};

export const unlockScreen = async (data) => {
  await actionADB({ action: 'unlockScreen', device_id: data.device_id });
};

export const delImg = async (data) => {
  await actionADB({ action: 'delImg', device_id: data.device_id });
};

export const camera = async (data) => {
  // camera_id: 1 => Cam tr∆∞·ªõc
  // camera_id: 0 => Cam sau

  await actionADB({ action: 'camera', device_id: data.device_id, camera_id: 1 });
};

export const connect = async (data) => {
  await actionADB({ action: 'connect', device_id: data.device_id, title: data.title });
  await actionADB({ action: 'delImg', device_id: data.device_id });
};

export const connectTcpIp = async (data) => {
  return await actionADB({ action: 'connectTcpIp', device_id: data.device_id, type: data.type || 'wlan0' });
};

export const disconnectTcpIp = async (data) => {
  return await actionADB({ action: 'disconnectTcpIp', device_id: data.device_id });
};

// ============== ACB ============== //

export const acbScanQR = async (data, setLoading) => {  
  const deviceCoordinates = await actionADB({ action: 'checkDeviceACB', device_id: data.device_id }); 

  if (deviceCoordinates.status === 500) {
    return swalNotification("error", "Thi·∫øt b·ªã ch∆∞a h·ªó tr·ª£ ACB", "Vui l√≤ng chuy·ªÉn ng√¢n h√†ng sang ƒëi·ªán tho·∫°i kh√°c");      
  }  

  setLoading(true);    

  const text = await swalInputPass('Nh·∫≠p m·∫≠t kh·∫©u', '', 'Nh·∫≠p m·∫≠t kh·∫©u ACB c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
  if (!text) return;

  console.log('1. Stop all of apps running');
  await actionADB({ action: 'stopAllApps', device_id: data.device_id }); 
  await delay(1000); 

  console.log('2. Start app ACB');
  await actionADB({ action: 'startACB', device_id: data.device_id });

  await delay(14000);

  console.log('3. Scan QR');
  await actionADB({ action: 'ScanQRACB', device_id: data.device_id }); 
  await delay(500);

  console.log('4. Begin loginning...');   
  await actionADB({ action: 'clickLoginACB', device_id: data.device_id });
  await actionADB({ action: 'input', device_id: data.device_id, text: text.trim() });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 });  
  await delay(2000); // trong l√∫c loading v√†o trong th√¨ cho ch·ªù th√™m ƒë·ªÉ gi·∫£m s·ªë file track

  // Track ACB App while it is in process  
  const trackACBPromise = actionADB({ action: 'trackACB', device_id: data.device_id }); 
        
  // ƒê·ª£i trackACBPromise ho√†n th√†nh (n·∫øu app ACB b·ªã tho√°t)
  const trackResult = await trackACBPromise;
  if (!trackResult) {
    console.log('üì¢ Theo d√µi ACB ƒë√£ k·∫øt th√∫c.');
  }

  // console.log('6. Delete all of imgs in device');
  // await actionADB({ action: 'delImg', device_id: data.device_id }); 

  setLoading(false);
};

// ============== EXIM ============== //

export const eximScanQR = async (data, setLoading) => {  
  const deviceCoordinates = await actionADB({ action: 'checkDeviceEXIM', device_id: data.device_id }); 

  if (deviceCoordinates.status === 500) {
    return swalNotification("error", "Thi·∫øt b·ªã ch∆∞a h·ªó tr·ª£ EXIM", "Vui l√≤ng chuy·ªÉn ng√¢n h√†ng sang ƒëi·ªán tho·∫°i kh√°c");      
  }  

  setLoading(true);    

  const text = await swalInputPass('Nh·∫≠p m·∫≠t kh·∫©u', '', 'Nh·∫≠p m·∫≠t kh·∫©u EXIM c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
  if (!text) return;

  console.log('1. Stop all of apps running');
  await actionADB({ action: 'stopAllApps', device_id: data.device_id }); 
  await delay(1000);

  console.log('2. Start app Eximbank EDigi');
  await actionADB({ action: 'startEXIM', device_id: data.device_id });

  await delay(3500);

  // Track EXIM while it is in process 
  const trackEXIMPromise = actionADB({ action: 'trackEXIM', device_id: data.device_id });

  console.log('3. Scan QR');
  await actionADB({ action: 'ScanQREXIM', device_id: data.device_id });   

  console.log('4. Input keyevent 61 4 times, then input password');
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'input', device_id: data.device_id, text: text.trim() });
  await delay(500);
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 });
   
  // ƒê·ª£i trackEXIMPromise ho√†n th√†nh (n·∫øu app EXIM b·ªã tho√°t)
  const trackResult = await trackEXIMPromise;
  if (!trackResult) {
    console.log('üì¢ Theo d√µi EXIM ƒë√£ k·∫øt th√∫c.');
  }

  // console.log('5. Delete all of imgs in device');
  // await actionADB({ action: 'delImg', device_id: data.device_id }); 

  console.log('5. Stop all of apps running');
  await actionADB({ action: 'stopAllApps', device_id: data.device_id });

  setLoading(false);
};

// ============== OCB ============== //

export const ocbScanQR = async (data, setLoading) => {  
  const deviceCoordinates = await actionADB({ action: 'checkDeviceOCB', device_id: data.device_id }); 

  if (deviceCoordinates.status === 500) {
    return swalNotification("error", "Thi·∫øt b·ªã ch∆∞a h·ªó tr·ª£ OCB", "Vui l√≤ng chuy·ªÉn ng√¢n h√†ng sang ƒëi·ªán tho·∫°i kh√°c");      
  }

  setLoading(true);  

  const text = await swalInputPass('Nh·∫≠p m√£ PIN', '', 'Nh·∫≠p m√£ PIN OCB c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
  if (!text) return;    

  console.log('1. Stop all of apps running');
  await actionADB({ action: 'stopAllApps', device_id: data.device_id }); 
  await delay(1000);

  console.log('2. Start app OCB OMNI 4.0');
  await actionADB({ action: 'startOCB', device_id: data.device_id });
  await delay(5000);

  console.log('3. Login');
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 });
  await delay(1000);

  console.log('4. Input PIN');  
  await actionADB({ action: 'input', device_id: data.device_id, text: text.trim() });
  await delay(4000);

  // Track OCB while it is in process  
  const trackOCBPromise = actionADB({ action: 'trackOCB', device_id: data.device_id });
  
  console.log('5. Scan QR, select img');    
  await actionADB({ action: 'ScanQROCB', device_id: data.device_id });   

  // ƒê·ª£i trackOCB ho√†n th√†nh (n·∫øu app OCB b·ªã tho√°t)
  const trackResult = await trackOCBPromise;
  if (!trackResult) {
    console.log('üì¢ Theo d√µi OCB ƒë√£ k·∫øt th√∫c.');
  }

  // console.log('6. Delete all of imgs in /sdcard');
  // await actionADB({ action: 'delImg', device_id: data.device_id }); 

  setLoading(false);
};

// ============== NCB ============== //

export const ncbScanQR = async (data, setLoading) => {  
  const deviceCoordinates = await actionADB({ action: 'checkDeviceNCB', device_id: data.device_id }); 

  if (deviceCoordinates.status === 500) {
    return swalNotification("error", "Thi·∫øt b·ªã ch∆∞a h·ªó tr·ª£ NCB", "Vui l√≤ng chuy·ªÉn ng√¢n h√†ng sang ƒëi·ªán tho·∫°i kh√°c");      
  }  

  setLoading(true);    

  const text = await swalInputPass('Nh·∫≠p m·∫≠t kh·∫©u', '', 'Nh·∫≠p m·∫≠t kh·∫©u NCB c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
  if (!text) return;

  console.log('1. Stop all of apps running');
  await actionADB({ action: 'stopAllApps', device_id: data.device_id }); 
  await delay(1000);  

  console.log('2. Start app NCB');
  await actionADB({ action: 'startNCB', device_id: data.device_id });
  await delay(6000);

  // Track NCB App while it is in process  
  // const trackNCBAppPromise = actionADB({ action: 'trackNCBApp', device_id: data.device_id });

  console.log('3. Input password and login');  
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'input', device_id: data.device_id, text: text.trim() });
  await delay(1000);
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 }); 
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 }); 
  await delay(2000);

  console.log('4. Scan QR, select img');
  await actionADB({ action: 'clickScanQRNCB', device_id: data.device_id });
  await delay(500);
  await actionADB({ action: 'ScanQRNCB', device_id: data.device_id });
  await delay(3000); 

  // ƒê·ª£i trackNCBApp ho√†n th√†nh (n·∫øu app NCB b·ªã tho√°t)
  // const trackResult = await trackNCBAppPromise;
  // if (!trackResult) {
  //   console.log('üì¢ Theo d√µi NCB ƒë√£ k·∫øt th√∫c.');
  // }

  // console.log('5. Delete all of imgs in device');
  // await actionADB({ action: 'delImg', device_id: data.device_id }); 

  setLoading(false);
};

// ============== NAB ============== //

export const nabScanQR = async (data, setLoading) => {  
  const deviceCoordinates = await actionADB({ action: 'checkDeviceNAB', device_id: data.device_id }); 

  if (deviceCoordinates.status === 500) {
    return swalNotification("error", "Thi·∫øt b·ªã ch∆∞a h·ªó tr·ª£ NAB", "Vui l√≤ng chuy·ªÉn ng√¢n h√†ng sang ƒëi·ªán tho·∫°i kh√°c");      
  }  

  setLoading(true);    

  const text = await swalInputPass('Nh·∫≠p m·∫≠t kh·∫©u', '', 'Nh·∫≠p m·∫≠t kh·∫©u NAB c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
  if (!text) return;

  console.log('1. Stop all of apps running');
  await actionADB({ action: 'stopAllApps', device_id: data.device_id }); 
  await delay(1000);

  console.log('2. Start app NAB');
  await actionADB({ action: 'startNAB', device_id: data.device_id });

  await delay(6000);
  
  console.log('3. Click Log in');   
  await actionADB({ action: 'clickLoginNAB', device_id: data.device_id });

  console.log('4. Tab to Password field, input text, then enter twice');
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });  
  
  await actionADB({ action: 'input', device_id: data.device_id, text: text.trim() });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 });  
  await delay(6000); 

  // Track NAB app while it is in process  
  const trackNABPromise = actionADB({ action: 'trackNAB', device_id: data.device_id });

  console.log('5. Select img');
  await actionADB({ action: 'ScanQRNAB', device_id: data.device_id });
  await delay(3000); 

  // ƒê·ª£i trackNAB ho√†n th√†nh (n·∫øu app NAB b·ªã tho√°t)
  const trackResult = await trackNABPromise;
  if (!trackResult) {
    console.log('üì¢ Theo d√µi NAB ƒë√£ k·∫øt th√∫c.');
  }

  // console.log('6. Delete all of imgs in device');
  // await actionADB({ action: 'delImg', device_id: data.device_id }); 

  setLoading(false);
};

// ============== TPB ============== //

export const tpbScanQR = async (data, setLoading) => {  
  const deviceCoordinates = await actionADB({ action: 'checkDeviceTPB', device_id: data.device_id }); 

  if (deviceCoordinates.status === 500) {
    return swalNotification("error", "Thi·∫øt b·ªã ch∆∞a h·ªó tr·ª£ TPB", "Vui l√≤ng chuy·ªÉn ng√¢n h√†ng sang ƒëi·ªán tho·∫°i kh√°c");      
  }  

  setLoading(true);    

  const text = await swalInputPass('Nh·∫≠p m·∫≠t kh·∫©u', '', 'Nh·∫≠p m·∫≠t kh·∫©u TPB c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');  
  if (!text) return;

  console.log('1. Stop all of apps running');
  await actionADB({ action: 'stopAllApps', device_id: data.device_id }); 
  await delay(1000);

  console.log('2. Start app TPB');
  await actionADB({ action: 'startTPB', device_id: data.device_id });
  await delay(5000);  

  console.log('3. Scan QR, select img');  
  await actionADB({ action: 'scanQRTPB', device_id: data.device_id });
  await delay(1500);

  console.log('4. Input password after selecting img, enter');  
  await actionADB({ action: 'input', device_id: data.device_id, text: text.trim() }); 
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 }); 

  // Track TPB while it is in process  
  const trackTPBPromise = actionADB({ action: 'trackTPB', device_id: data.device_id });
  
  // ƒê·ª£i trackTPB ho√†n th√†nh (n·∫øu app TPB b·ªã tho√°t)
  const trackResult = await trackTPBPromise;
  if (!trackResult) {
    console.log('üì¢ Theo d√µi TPB ƒë√£ k·∫øt th√∫c.');
  }

  // console.log('5. Delete all of imgs in /sdcard');
  // await actionADB({ action: 'delImg', device_id: data.device_id }); 

  setLoading(false);
};

// ============== VPB ============== //

export const vpbScanQR = async (data, setLoading) => {  
  const deviceCoordinates = await actionADB({ action: 'checkDeviceVPB', device_id: data.device_id }); 

  if (deviceCoordinates.status === 500) {
    return swalNotification("error", "Thi·∫øt b·ªã ch∆∞a h·ªó tr·ª£ VPB", "Vui l√≤ng chuy·ªÉn ng√¢n h√†ng sang ƒëi·ªán tho·∫°i kh√°c");      
  }  

  setLoading(true);    

  //const text = await swalInputPass('Nh·∫≠p m√£ PIN', '', 'Nh·∫≠p m√£ PIN VPB c·∫ßn truy·ªÅn cho thi·∫øt b·ªã');  
  const text = await swalInputPass('Nh·∫≠p m√£ PIN ho·∫∑c m·∫≠t kh·∫©u', '', 'Nh·∫≠p m√£ PIN ho·∫∑c m·∫≠t kh·∫©u VPB c·∫ßn truy·ªÅn cho thi·∫øt b·ªã');  
  if (!text) return;

  console.log('1. Stop all of apps running');
  await actionADB({ action: 'stopAllApps', device_id: data.device_id }); 
  await delay(1000);

  console.log('2. Start app VPB');
  await actionADB({ action: 'startVPB', device_id: data.device_id });
  await delay(6000);    
  
  // Ki·ªÉm tra n·∫øu `text` l√† s·ªë th√¨ d√πng inputPINVPB, n·∫øu kh√¥ng th√¨ d√πng input
  if (!isNaN(text) && !text.includes(' ')) {
    console.log('3. Scan QR');  
    await actionADB({ action: 'clickScanQRVPB', device_id: data.device_id });
    await delay(500);
    console.log('4. Input PIN after selecting img');
    await actionADB({ action: 'inputPINVPB', device_id: data.device_id, text: text.trim() });   
  } else {
    console.log('3. Scan QR');  
    await actionADB({ action: 'clickScanQRVPB2', device_id: data.device_id });
    console.log('4. Input password after selecting img');
    // Nh·∫≠p m·∫≠t kh·∫©u xong 66, 61, 66
    await actionADB({ action: 'input', device_id: data.device_id, text: text.trim() }); 
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 }); 
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 }); 
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 }); 
  }
  await delay(6000);  

  // Track VPB while it is in process  
  const trackVPBPromise = actionADB({ action: 'trackVPB', device_id: data.device_id });

  console.log('5. Select img after input PIN');  
  await actionADB({ action: 'scanQRVPB', device_id: data.device_id });

  // ƒê·ª£i trackVPB ho√†n th√†nh (n·∫øu app VPB b·ªã tho√°t)
  const trackResult = await trackVPBPromise;
  if (!trackResult) {
    console.log('üì¢ Theo d√µi VPB ƒë√£ k·∫øt th√∫c.');
  }

  // console.log('6. Delete all of imgs in /sdcard');
  // await actionADB({ action: 'delImg', device_id: data.device_id }); 

  setLoading(false);
};

// ============== MB BANK ============== //

export const mbScanQR = async (data, setLoading) => {  
  const deviceCoordinates = await actionADB({ action: 'checkDeviceMB', device_id: data.device_id }); 

  if (deviceCoordinates.status === 500) {
    return swalNotification("error", "Thi·∫øt b·ªã ch∆∞a h·ªó tr·ª£ MB Bank", "Vui l√≤ng chuy·ªÉn ng√¢n h√†ng sang ƒëi·ªán tho·∫°i kh√°c");      
  }  

  setLoading(true);    

  const text = await swalInputPass('Nh·∫≠p m·∫≠t kh·∫©u', '', 'Nh·∫≠p m·∫≠t kh·∫©u MB Bank c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
  if (!text) return;

  // console.log('1. Copy QR images'); 
  // await actionADB({ action: 'copyQRImages', device_id: data.device_id });

  console.log('1. Stop all of apps running');
  await actionADB({ action: 'stopAllApps', device_id: data.device_id }); 
  await delay(1000); 

  console.log('2. Start app MB Bank');
  await actionADB({ action: 'startMB', device_id: data.device_id });

  await delay(10000);  

  console.log('3. Input password and login');  
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'input', device_id: data.device_id, text: text.trim() });
  await delay(1000);
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 }); 
  await delay(4000);

  // Track MB App while it is in process  
  const trackMBPromise = actionADB({ action: 'trackMB', device_id: data.device_id });

  console.log('4. Scan QR');
  await actionADB({ action: 'scanQRMB', device_id: data.device_id });  
  await delay(3000); 

  //ƒê·ª£i trackMB ho√†n th√†nh (n·∫øu app MB Bank b·ªã tho√°t)
  const trackResult = await trackMBPromise;
  if (!trackResult) {
    console.log('üì¢ Theo d√µi MB Bank ƒë√£ k·∫øt th√∫c.');
  }

  // console.log('5. Delete all of imgs in /sdcard');
  // await actionADB({ action: 'delImg', device_id: data.device_id }); 

  setLoading(false);
};

// ============== BIDV ============== //

export const anotherBankCheckQR = async (data, setLoading) => {
  const deviceCoordinates = await actionADB({ action: 'checkDeviceBIDV', device_id: data.device_id }); 

  if (deviceCoordinates.status === 500) {
    return swalNotification("error", "Thi·∫øt b·ªã ch∆∞a h·ªó tr·ª£ BIDV", "Vui l√≤ng chuy·ªÉn ng√¢n h√†ng sang ƒëi·ªán tho·∫°i kh√°c");      
  }

  const text = await swalInputPass('Nh·∫≠p m·∫≠t kh·∫©u', '', 'Nh·∫≠p m·∫≠t kh·∫©u ƒëƒÉng nh·∫≠p bank kh√°c b·∫•t k·ª≥');
  if (!text) return;

  setLoading(true);

  // Start app ƒë∆∞·ª£c ch·ªçn
  await actionADB({ action: 'start', device_id: data.device_id });

  // Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ ƒëƒÉng nh·∫≠p v√†o app ƒë√≥
  await actionADB({ action: 'input', device_id: data.device_id, text: text.trim() });

  // Tab v√† ƒëƒÉng nh·∫≠p
  // Tab v√†o QR / Click v√†o √¥ Scan QR (x, y)
  // Click v√†o √¥ ch·ªçn ·∫£nh (x, y) ... ch·ªçn m√£ QR (duy nh·∫•t)

  setLoading(false);
};

export const bidvLogin = async (data, setLoading) => {
  const deviceCoordinates = await actionADB({ action: 'checkDeviceBIDV', device_id: data.device_id }); 

  if (deviceCoordinates.status === 500) {
    return swalNotification("error", "Thi·∫øt b·ªã ch∆∞a h·ªó tr·ª£ BIDV", "Vui l√≤ng chuy·ªÉn ng√¢n h√†ng sang ƒëi·ªán tho·∫°i kh√°c");      
  }

  const text = await swalInputPass('Nh·∫≠p m·∫≠t kh·∫©u', '', 'Nh·∫≠p m·∫≠t kh·∫©u c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
  if (!text) return;

  setLoading(true);

  try {
    // Start app
    await actionADB({ action: 'stopBIDV', device_id: data.device_id });
    await actionADB({ action: 'startBIDV', device_id: data.device_id });
    await delay(8000);

    // Tab v√†o √¥ m·∫≠t kh·∫©u
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 });
    await delay(1000);

    // Nh·∫≠p m·∫≠t kh·∫©u
    await actionADB({ action: 'input', device_id: data.device_id, text: text.trim() });
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 });    
    await delay(1000);    

    // Tab v√† ƒëƒÉng nh·∫≠p
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 20 });
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 });
    await delay(5000);

    setLoading(false);
  } catch (error) {
    swalToast({ title: `ƒê√£ x·∫£y ra l·ªói: ${error.message}`, icon: 'error' });
    console.error(error);
  } finally {
    setLoading(false);
  }
};

export const bidvScanQR = async (data, setLoading) => {
  const deviceCoordinates = await actionADB({ action: 'checkDeviceBIDV', device_id: data.device_id }); 

  if (deviceCoordinates.status === 500) {
    return swalNotification("error", "Thi·∫øt b·ªã ch∆∞a h·ªó tr·ª£ BIDV", "Vui l√≤ng chuy·ªÉn ng√¢n h√†ng sang ƒëi·ªán tho·∫°i kh√°c");      
  }

  setLoading(true);

  try {        
    // Click v√†o √¥ Scan QR  (540, 2125)
    await actionADB({ action: 'clickScanQRBIDV', device_id: data.device_id });
    setLoading(true);
    await delay(1000);

    // Click v√†o √¥ ch·ªçn ·∫£nh (456, 1620) ... ch·ªçn m√£ QR th·ªß c√¥ng
    await actionADB({ action: 'clickSelectImageBIDV', device_id: data.device_id });  
    setLoading(false);
  } catch (error) {
    swalToast({ title: `ƒê√£ x·∫£y ra l·ªói: ${error.message}`, icon: 'error' });
    console.error(error);
  } finally {
    setLoading(false);
  }
};

export const bidvConfirm = async (data, setLoading) => {  
  const deviceCoordinates = await actionADB({ action: 'checkDeviceBIDV', device_id: data.device_id }); 

  if (deviceCoordinates.status === 500) {
    return swalNotification("error", "Thi·∫øt b·ªã ch∆∞a h·ªó tr·ª£ BIDV", "Vui l√≤ng chuy·ªÉn ng√¢n h√†ng sang ƒëi·ªán tho·∫°i kh√°c");      
  }

  const text = await swalInputPass('Nh·∫≠p m√£ PIN', '', 'Nh·∫≠p m√£ PIN c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
  if (!text) return;

  // Click v√†o Next 
  setLoading(true);
  await actionADB({ action: 'clickConfirmBIDV', device_id: data.device_id });
  await delay(4000);

  // Paste PIN  
  await actionADB({ action: 'input', device_id: data.device_id, text: text.trim() });     
  await delay(4000);

  // Click Confirm
  await actionADB({ action: 'clickConfirmBIDV', device_id: data.device_id });

  setLoading(false);
};

export const bidvConfirmBeforeFace = async (data, setLoading) => {  
  const deviceCoordinates = await actionADB({ action: 'checkDeviceBIDV', device_id: data.device_id }); 

  if (deviceCoordinates.status === 500) {
    return swalNotification("error", "Thi·∫øt b·ªã ch∆∞a h·ªó tr·ª£ BIDV", "Vui l√≤ng chuy·ªÉn ng√¢n h√†ng sang ƒëi·ªán tho·∫°i kh√°c");      
  } 

  // Click v√†o Next
  await actionADB({ action: 'clickConfirmBIDV', device_id: data.device_id });
  setLoading(false);
};

export const bidvConfirmAfterFace = async (data, setLoading) => {  
  const deviceCoordinates = await actionADB({ action: 'checkDeviceBIDV', device_id: data.device_id }); 

  if (deviceCoordinates.status === 500) {
    return swalNotification("error", "Thi·∫øt b·ªã ch∆∞a h·ªó tr·ª£ BIDV", "Vui l√≤ng chuy·ªÉn ng√¢n h√†ng sang ƒëi·ªán tho·∫°i kh√°c");      
  }

  const text = await swalInputPass('Nh·∫≠p m√£ PIN', '', 'Nh·∫≠p m√£ PIN c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
  if (!text) return;

  // Input PIN  
  await actionADB({ action: 'inputPINBIDV', device_id: data.device_id, text: text.trim() });   
  await delay(3000);

  // X√≥a lu√¥n ·∫£nh trong th∆∞ vi·ªán trong l√∫c qu√©t m·∫∑t
  await actionADB({ action: 'delImg', device_id: data.device_id });
  await delay(1000);  

  // Click v√†o Confirm
  await actionADB({ action: 'clickConfirmBIDV', device_id: data.device_id });
  setLoading(false);
};

export const bidvScanFaceConfirm = async (data, setLoading) => {  
  const deviceCoordinates = await actionADB({ action: 'checkDeviceBIDV', device_id: data.device_id }); 

  if (deviceCoordinates.status === 500) {
    return swalNotification("error", "Thi·∫øt b·ªã ch∆∞a h·ªó tr·ª£ BIDV", "Vui l√≤ng chuy·ªÉn ng√¢n h√†ng sang ƒëi·ªán tho·∫°i kh√°c");      
  }

  const text = await swalInputPass('Nh·∫≠p m√£ PIN', '', 'Nh·∫≠p m√£ PIN c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
  if (!text) return;

  // Nh·∫≠p PIN (sau b∆∞·ªõc qu√©t m·∫∑t)
  await actionADB({ action: 'input', device_id: data.device_id, text: text.trim() });
  setLoading(true);
  await actionADB({ action: 'clickConfirmBIDV', device_id: data.device_id });
  // await actionADB({ action: 'clickConfirmScanFaceBIDV', device_id: data.device_id });
  await delay(3000);  

  // Click v√†o Confirm
  // await actionADB({ action: 'clickConfirmBIDV', device_id: data.device_id });
  setLoading(false);
};

// ============== VCB ============== //

export const vcbOldClickLogin = async (data, setLoading) => {
  const text = await swalInputPass('Nh·∫≠p m·∫≠t kh·∫©u', '', 'Nh·∫≠p m·∫≠t kh·∫©u c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
  if (!text) return;
  setLoading(true);
  await actionADB({ action: 'input', device_id: data.device_id, text: text.trim() });
  await delay(2000);
  await enter({ device_id: data.device_id });
  setLoading(false);
};

// ============== VCB ============== //

export const vcbLogin = async (data, setLoading) => {
  const text = await swalInputPass('Nh·∫≠p m·∫≠t kh·∫©u', '', 'Nh·∫≠p m·∫≠t kh·∫©u c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
  if (!text) return;

  setLoading(true);
  
  try{
    // Start app (hidden because of taking a lot of time starting app vcb with some kind of devices)
    // await actionADB({ action: 'stopVCB', device_id: data.device_id });
    // await actionADB({ action: 'startVCB', device_id: data.device_id });
    // await delay(8000);

    // Tab v√†o √¥ m·∫≠t kh·∫©u
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });    

    // Nh·∫≠p m·∫≠t kh·∫©u v√† click n√∫t ƒêƒÉng nh·∫≠p
    await actionADB({ action: 'input', device_id: data.device_id, text: text.trim() });
    await delay(1000);
    await enter({ device_id: data.device_id });
    await enter({ device_id: data.device_id });    
  } catch(error) {
    swalToast({ title: `ƒê√£ x·∫£y ra l·ªói: ${error.message}`, icon: 'error' });
    console.error(error);
  } finally {
    setLoading(false);
  }
};

export const vcbNewClickConfirm = async (data, setLoading) => {
  const text = await swalInputPass('Nh·∫≠p m√£ PIN', '', 'Nh·∫≠p m√£ PIN c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
  if (!text) return;
  setLoading(true);
  await actionADB({ action: 'input', device_id: data.device_id, text: text.trim() });
  await delay(1000);
  await enter({ device_id: data.device_id });
  await enter({ device_id: data.device_id });
  await delay(1000);
  setLoading(false);
};

export const vcbNewGetOTP = async (data, setLoading) => {
  const text = await swalInputPass('Nh·∫≠p m√£ PIN', '', 'Nh·∫≠p m√£ PIN c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
  if (!text) return;
  setLoading(true);
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await enter({ device_id: data.device_id });
  await delay(2000);
  await actionADB({ action: 'input', device_id: data.device_id, text: text.trim() });
  await enter({ device_id: data.device_id });
  await enter({ device_id: data.device_id });
  await delay(1000);
  setLoading(false);
};

// ============== VTB ============== //

// export const vietinLogin = async (data, setLoading) => {  
//   const text = await swalInputPass('Nh·∫≠p m·∫≠t kh·∫©u', '', 'Nh·∫≠p m·∫≠t kh·∫©u c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
//   if (!text) return;
  
//   setLoading(true);

//   try {       
//     const deviceCoordinates = await actionADB({ action: 'checkDeviceVTB', device_id: data.device_id });    
//     const checkDeviceFHDOrNot = await actionADB({ action: 'checkDeviceFHD', device_id: data.device_id });    
            
//     if (deviceCoordinates.status === 500) {
//       return swalNotification("error", "Thi·∫øt b·ªã ch∆∞a h·ªó tr·ª£ VTB", "Vui l√≤ng chuy·ªÉn ng√¢n h√†ng sang ƒëi·ªán tho·∫°i kh√°c");      
//     }    

//     if (checkDeviceFHDOrNot.status === 500) {
//       return swalNotification("error", "Vui l√≤ng c√†i ƒë·∫∑t k√≠ch th∆∞·ªõc m√†n h√¨nh v·ªÅ FHD+");      
//     } 
    
//     // Start app
//     await actionADB({ action: 'stopVTB', device_id: data.device_id });
//     await actionADB({ action: 'startVTB', device_id: data.device_id });
//     await delay(8000);

//     // Tab v√†o √¥ m·∫≠t kh·∫©u
//     await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
//     await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
//     await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
//     await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 });

//     // Nh·∫≠p m·∫≠t kh·∫©u v√† click n√∫t ƒêƒÉng nh·∫≠p
//     await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
//     await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
//     await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
//     await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
//     await delay(50);
//     await actionADB({ action: 'inputVTB', device_id: data.device_id, text: text.trim() });
//     await delay(4000);
//     await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 20 });
//     await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 });  

//     setLoading(false);
//   } catch (error) {
//     swalToast({ title: `ƒê√£ x·∫£y ra l·ªói: ${error.message}`, icon: 'error' });
//     console.error(error);
//   } finally {
//     setLoading(false);
//   }
// };

// export const vietinConfirm = async (data, setLoading) => {  
//   try {       
//     const deviceCoordinates = await actionADB({ action: 'checkDeviceVTB', device_id: data.device_id });    
//     const checkDeviceFHDOrNot = await actionADB({ action: 'checkDeviceFHD', device_id: data.device_id });    
            
//     if (deviceCoordinates.status === 500) {
//       return swalNotification("error", "Thi·∫øt b·ªã ch∆∞a h·ªó tr·ª£ VTB", "Vui l√≤ng chuy·ªÉn ng√¢n h√†ng sang ƒëi·ªán tho·∫°i kh√°c");      
//     }    

//     if (checkDeviceFHDOrNot.status === 500) {
//       return swalNotification("error", "Vui l√≤ng c√†i ƒë·∫∑t k√≠ch th∆∞·ªõc m√†n h√¨nh v·ªÅ FHD+");      
//     }    

//     const text = await swalInputPass('Nh·∫≠p m√£ PIN', '', 'Nh·∫≠p m√£ PIN c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
//     if (!text) return;
    
//     setLoading(true);

//     // Click Ti·∫øp t·ª•c (= X√°c nh·∫≠n)
//     await actionADB({ action: 'clickConfirmVTB', device_id: data.device_id });  
//     await delay(12500);  
    
//     // Nh·∫≠p m√£ PIN v√† x√°c nh·∫≠n ... x√≥a lu√¥n ·∫£nh trong th∆∞ vi·ªán
//     await actionADB({ action: 'inputPINVTB', device_id: data.device_id, text: text.trim() });    
//     await delay(3000);
//     await actionADB({ action: 'delImg', device_id: data.device_id });    
//     await delay(1000);

//     // Click x√°c nh·∫≠n
//     await actionADB({ action: 'clickConfirmVTB', device_id: data.device_id });

//     setLoading(false);
//   } catch (error) {
//     swalToast({ title: `ƒê√£ x·∫£y ra l·ªói: ${error.message}`, icon: 'error' });
//     console.error(error);
//   } finally {
//     setLoading(false);
//   }
// };

export const vietinScanQR = async (data, setLoading) => {  
  try {       
    const deviceCoordinates = await actionADB({ action: 'checkDeviceVTB', device_id: data.device_id });    
    const checkDeviceFHDOrNot = await actionADB({ action: 'checkDeviceFHD', device_id: data.device_id });    
            
    if (deviceCoordinates.status === 500) {
      return swalNotification("error", "Thi·∫øt b·ªã ch∆∞a h·ªó tr·ª£ VTB", "Vui l√≤ng chuy·ªÉn ng√¢n h√†ng sang ƒëi·ªán tho·∫°i kh√°c");      
    }    

    if (checkDeviceFHDOrNot.status === 500) {
      return swalNotification("error", "Vui l√≤ng c√†i ƒë·∫∑t k√≠ch th∆∞·ªõc m√†n h√¨nh v·ªÅ FHD+");      
    } 

    // Nh·∫≠p m·∫≠t kh·∫©u ƒëƒÉng nh·∫≠p v√† m√£ PIN ƒë·ªÉ x√°c nh·∫≠n giao d·ªãch
    const text = await swalInputPass('Nh·∫≠p m·∫≠t kh·∫©u', '', 'Nh·∫≠p m·∫≠t kh·∫©u c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
    if (!text) return;
    const text2 = await swalInputPass('Nh·∫≠p m√£ PIN', '', 'Nh·∫≠p m√£ PIN c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
    if (!text2) return;
    setLoading(true);
    await actionADB({ action: 'input', device_id: data.device_id, text: text.trim() });

    // Start app
    console.log('1. Stop all of apps running');
    await actionADB({ action: 'stopAllApps', device_id: data.device_id }); 
    await delay(1000);
    console.log('2. startVTB');
    await actionADB({ action: 'startVTB', device_id: data.device_id });
    await delay(6000);
    
    // Tab v√†o √¥ Scan QR v√† ch·ªçn ·∫£nh .. ch·ªçn m√£ QR th·ªß c√¥ng ... x√≥a lu√¥n ·∫£nh trong th∆∞ vi·ªán
    console.log('3. scanQRVTB');
    await actionADB({ action: 'scanQRVTB', device_id: data.device_id }); // Ch·ªçn ·∫£nh t·ª´ trong m√°y         
    await delay(2000);

    // Tab v√†o √¥ m·∫≠t kh·∫©u
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 });

    // Nh·∫≠p m·∫≠t kh·∫©u v√† click n√∫t ƒêƒÉng nh·∫≠p
    await actionADB({ action: 'inputVTB', device_id: data.device_id, text: text.trim() });
    await delay(1000);
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 20 });
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 }); 
    await delay(5000);

    // Click x√°c nh·∫≠n
    await actionADB({ action: 'clickConfirmVTB', device_id: data.device_id });
    await delay(12000); // ch·ªù qu√©t m·∫∑t ho·∫∑c video loading...
    await actionADB({ action: 'inputPINVTB', device_id: data.device_id, text: text2.trim() });
    await delay(4000);
    await actionADB({ action: 'clickConfirmVTB', device_id: data.device_id });

    setLoading(false);
  } catch (error) {
    swalToast({ title: `ƒê√£ x·∫£y ra l·ªói: ${error.message}`, icon: 'error' });
    console.error(error);
  } finally {
    setLoading(false);
  }
};

export const vietinConfirmAfterFace = async (data, setLoading) => {  
  try {       
    const deviceCoordinates = await actionADB({ action: 'checkDeviceVTB', device_id: data.device_id });    
    const checkDeviceFHDOrNot = await actionADB({ action: 'checkDeviceFHD', device_id: data.device_id });    
            
    if (deviceCoordinates.status === 500) {
      return swalNotification("error", "Thi·∫øt b·ªã ch∆∞a h·ªó tr·ª£ VTB", "Vui l√≤ng chuy·ªÉn ng√¢n h√†ng sang ƒëi·ªán tho·∫°i kh√°c");      
    }    

    if (checkDeviceFHDOrNot.status === 500) {
      return swalNotification("error", "Vui l√≤ng c√†i ƒë·∫∑t k√≠ch th∆∞·ªõc m√†n h√¨nh v·ªÅ FHD+");      
    }    

    const text = await swalInputPass('Nh·∫≠p m√£ PIN', '', 'Nh·∫≠p m√£ PIN c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
    if (!text) return;
    
    setLoading(true);

    // Click Ti·∫øp t·ª•c (= X√°c nh·∫≠n)
    await actionADB({ action: 'clickConfirmVTB', device_id: data.device_id });
    await delay(10000); // ch·ªù qu√©t m·∫∑t ho·∫∑c video loading...
    
    // Nh·∫≠p m√£ PIN v√† x√°c nh·∫≠n ... x√≥a lu√¥n ·∫£nh trong th∆∞ vi·ªán    
    await actionADB({ action: 'inputPINVTB', device_id: data.device_id, text: text.trim() });    
    await actionADB({ action: 'delImg', device_id: data.device_id });    
    await delay(1000);

    // Click x√°c nh·∫≠n
    await actionADB({ action: 'clickConfirmVTB', device_id: data.device_id });

    setLoading(false);
  } catch (error) {
    swalToast({ title: `ƒê√£ x·∫£y ra l·ªói: ${error.message}`, icon: 'error' });
    console.error(error);
  } finally {
    setLoading(false);
  }
};

// ============== MSB ============== //

export const msbScanQR = async (data, setLoading) => {  
  const deviceCoordinates = await actionADB({ action: 'checkDeviceMSB', device_id: data.device_id }); 

  if (deviceCoordinates.status === 500) {
    return swalNotification("error", "Thi·∫øt b·ªã ch∆∞a h·ªó tr·ª£ MSB", "Vui l√≤ng chuy·ªÉn ng√¢n h√†ng sang ƒëi·ªán tho·∫°i kh√°c");      
  }  

  setLoading(true);    

  const text = await swalInputPass('Nh·∫≠p m√£ PIN', '', 'Nh·∫≠p m·∫≠t kh·∫©u MSB c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
  if (!text) return;

  // console.log('1. Copy QR images'); 
  // await actionADB({ action: 'copyQRImages', device_id: data.device_id });

  console.log('1. Stop app MSB');
  await actionADB({ action: 'stopMSB', device_id: data.device_id });  

  console.log('2. Start app MSB');
  await actionADB({ action: 'startMSB', device_id: data.device_id });

  await delay(10000);
  // Track MSB App while it is in process  
  const trackMSBPromise = actionADB({ action: 'trackMSB', device_id: data.device_id });

  console.log('3. Scan QR');
  await actionADB({ action: 'clickScanQRMSB', device_id: data.device_id }); 
  await delay(300); 

  console.log('4. Input PIN to login');    
  await actionADB({ action: 'inputPINMSB', device_id: data.device_id, text: text.trim() });   
  await delay(2000); 

  console.log('5. Select img');
  await actionADB({ action: 'clickSelectImageMSB', device_id: data.device_id });
  await delay(3000);
   
  // ƒê·ª£i trackMSB ho√†n th√†nh (n·∫øu app MSB b·ªã tho√°t)
  const trackResult = await trackMSBPromise;
  if (!trackResult) {
    console.log('üì¢ Theo d√µi MSB ƒë√£ k·∫øt th√∫c.');
  }

  console.log('6. Delete all of imgs in device');
  await actionADB({ action: 'delImg', device_id: data.device_id }); 

  setLoading(false);
};

// ============== SHB SAHA ============== //

export const shbsahaScanQR = async (data, setLoading) => {
  const text = await swalInputPass('Nh·∫≠p m·∫≠t kh·∫©u', '', 'Nh·∫≠p m·∫≠t kh·∫©u c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
  if (!text) return;
  setLoading(true);

  try {
    
    console.log('1. stopAllApps');
    await actionADB({ action: 'stopAllApps', device_id: data.device_id });     
    console.log('2. startSHBSAHA');
    await actionADB({ action: 'startSHBSAHA', device_id: data.device_id });
    await delay(5000);

    console.log('3. Login');
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
    // Nh·∫≠p m·∫≠t kh·∫©u v√† ƒëƒÉng nh·∫≠p
    await actionADB({ action: 'input', device_id: data.device_id, text: text.trim() });
    await delay(500);
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 });
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 });
    await delay(5000);

    // Track SHB SAHA while it is in process  
    const trackSHBSAHAPromise = actionADB({ action: 'trackSHBSAHA', device_id: data.device_id });                

    console.log('4. Scan QR');
    await actionADB({ action: 'scanQRSHBSAHA', device_id: data.device_id });

    // ƒê·ª£i trackSHBSAHA ho√†n th√†nh (n·∫øu app SHB SAHA b·ªã tho√°t)
    const trackResult = await trackSHBSAHAPromise;
    if (!trackResult) {
      console.log('üì¢ Theo d√µi SHB SAHA ƒë√£ k·∫øt th√∫c.');
    }
  } catch (error) {
    swalToast({ title: `ƒê√£ x·∫£y ra l·ªói: ${error.message}`, icon: 'error' });
    console.error(error);
  } finally {
    setLoading(false);
  }
};

export const shbsahaLogin = async (data, setLoading) => {
  const text = await swalInputPass('Nh·∫≠p m·∫≠t kh·∫©u', '', 'Nh·∫≠p m·∫≠t kh·∫©u c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
  if (!text) return;
  setLoading(true);

  try {
    // Start app
    await actionADB({ action: 'stopSHBSAHA', device_id: data.device_id });
    await actionADB({ action: 'startSHBSAHA', device_id: data.device_id });
    await delay(5000);

    // Tab v√†o √¥ m·∫≠t kh·∫©u
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });

    // Nh·∫≠p m·∫≠t kh·∫©u v√† click n√∫t ƒêƒÉng nh·∫≠p
    await actionADB({ action: 'input', device_id: data.device_id, text: text.trim() });
    await delay(1000);
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 });
    await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 });
  } catch (error) {
    swalToast({ title: `ƒê√£ x·∫£y ra l·ªói: ${error.message}`, icon: 'error' });
    console.error(error);
  } finally {
    setLoading(false);
  }
};

// ============== ABB ============== //

export const abbClickLogin = async (data, setLoading) => {
  const text = await swalInputPass('Nh·∫≠p m·∫≠t kh·∫©u', '', 'Nh·∫≠p m·∫≠t kh·∫©u c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
  if (!text) return;
  setLoading(true);

  await actionADB({
    action: 'tap',
    device_id: data.device_id,
    percent: {
      X: percentage(310 * 1, data.X),
      Y: percentage(840 * 1, data.Y)
    },
    screenSize: { X: data.X, Y: data.Y }
  });
  await delay(1000);
  await actionADB({ action: 'input', device_id: data.device_id, text: text.trim() });
  await delay(2000);
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 4 });
  await delay(2000);
  await actionADB({
    action: 'tap',
    device_id: data.device_id,
    percent: {
      X: percentage(290 * 1, data.X),
      Y: percentage(1048 * 1, data.Y)
    },
    screenSize: { X: data.X, Y: data.Y }
  });

  await delay(1000);
  setLoading(false);
};

// ============== SHINHAN BANK ============== //

export const shinhanClickLogin = async (data, setLoading) => {
  const text = await swalInputPass('Nh·∫≠p m·∫≠t kh·∫©u', '', 'Nh·∫≠p m·∫≠t kh·∫©u c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');
  if (!text) return;
  setLoading(true);
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await enter({ device_id: data.device_id });

  await delay(5000);

  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await enter({ device_id: data.device_id });

  await delay(5000);

  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 61 });
  await actionADB({ action: 'input', device_id: data.device_id, text: text.trim() });

  setLoading(false);
};

// ============== BAB ============== //
export const babScanQR = async (data, setLoading) => {  
  const deviceCoordinates = await actionADB({ action: 'checkDeviceBAB', device_id: data.device_id }); 

  if (deviceCoordinates.status === 500) {
    return swalNotification("error", "Thi·∫øt b·ªã ch∆∞a h·ªó tr·ª£ BAB", "Vui l√≤ng chuy·ªÉn ng√¢n h√†ng sang ƒëi·ªán tho·∫°i kh√°c");      
  }  

  setLoading(true);    

  const text = await swalInputPass('Nh·∫≠p m·∫≠t kh·∫©u', '', 'Nh·∫≠p m·∫≠t kh·∫©u BAB c·∫ßn truy·ªÅn v√†o thi·∫øt b·ªã');  
  if (!text) return;

  console.log('1. Stop app BAB');
  await actionADB({ action: 'stopBAB', device_id: data.device_id });

  console.log('2. Start app BAB');
  await actionADB({ action: 'startBAB', device_id: data.device_id });
  await delay(6000);

  // // Track BAB while it is in process  
  // const trackBABAppPromise = actionADB({ action: 'trackBABApp', device_id: data.device_id });

  console.log('3. Scan QR, select img');  
  await actionADB({ action: 'clickSelectImageBAB', device_id: data.device_id });
  await delay(500);

  // console.log('4. Input password after selecting img, enter');  
  // await actionADB({ action: 'input', device_id: data.device_id, text: text.trim() }); 
  // await actionADB({ action: 'keyEvent', device_id: data.device_id, key_event: 66 }); 
  
  // // ƒê·ª£i trackBABApp ho√†n th√†nh (n·∫øu app BAB b·ªã tho√°t)
  // const trackResult = await trackBABAppPromise;
  // if (!trackResult) {
  //   console.log('üì¢ Theo d√µi BAB ƒë√£ k·∫øt th√∫c.');
  // }

  setLoading(false);
};

export const runMacro = async (macro, device) => {
  try {
    const sizeX = device.screenSize.split('x')[0];
    const sizeY = device.screenSize.split('x')[1];

    for (const step of macro) {
      if (step.action === 'tap') {
        const sendData = {
          action: step.action,
          device_id: device.id,
          percent: {
            X: percentage(step.X * 1, sizeX),
            Y: percentage(step.Y * 1, sizeY)
          },
          screenSize: { X: sizeX, Y: sizeY }
        };
        await actionADB(sendData);
      }
      if (step.action === 'delay') {
        await delay(step.time * 1);
      } else {
        step.device_id = device.id;
        step.screenSize = { X: sizeX, Y: sizeY };
        await actionADB(step);
      }
    }
  } catch (error) {
    console.log(error);
    swalToast('error', error.message);
  }
};

const percentage = (smallPart, largePart) => {
  return ((smallPart / largePart) * 100).toFixed(0);
};

const delay = async (ms) => {
  return new Promise((resolve) => setTimeout(resolve, ms));
};