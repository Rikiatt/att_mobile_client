const xml2js = require('xml2js');
const adb = require('adbkit');
const fs = require('fs');
const path = require('path');
const adbPath = path.join(__dirname, '../platform-tools', 'adb.exe');
const client = adb.createClient({ bin: adbPath });

const xmlFilePath = path.join(__dirname, 'logs', 'window_dump.xml');
const jsonFilePath = path.join(__dirname, 'database', 'info-qr-xml.json');

function parseXML() {
    try {
        const xmlData = fs.readFileSync(xmlFilePath, 'utf8');

        xml2js.parseString(xmlData, { explicitArray: false, mergeAttrs: true }, (err, result) => {
            if (err) {
                console.error("‚ùå L·ªói khi ph√¢n t√≠ch XML:", err);
                return;
            }

            // console.log('üìå Log XML result:', JSON.stringify(result, null, 4));

            // G·ªçi h√†m qu√©t XML
            const extractedData = extractNodes(result);
            console.log('üìå Log extractedData:', extractedData);

            if (extractedData.bin || extractedData.account_number || extractedData.amount) {
                fs.writeFileSync(jsonFilePath, JSON.stringify(extractedData, null, 4), 'utf8');
                console.log("‚úÖ ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu v√†o JSON:", extractedData);
            } else {
                console.log("‚ö† Kh√¥ng t√¨m th·∫•y ƒë·∫ßy ƒë·ªß d·ªØ li·ªáu c·∫ßn thi·∫øt.");
            }
        });

    } catch (error) {
        console.error("‚ùå L·ªói khi ƒë·ªçc file XML:", error);
    }
}

function extractNodes(obj) {
    let bin = null, account_number = null, amount = null;
    const bankList = ["Asia (ACB)", "Vietcombank", "Techcombank", "BIDV", "MB Bank", "Sacombank"];

    function traverse(node) {
        if (!node) return;

        // N·∫øu node l√† object, duy·ªát ti·∫øp
        if (typeof node === 'object') {
            for (let key in node) {
                traverse(node[key]); // ƒê·ªá quy v√†o c√°c node con
            }
        }

        // N·∫øu node ch·ª©a n·ªôi dung vƒÉn b·∫£n
        if (typeof node === 'string') {
            let text = node.trim();

            console.log(`üîç Scanning: "${text}"`);

            // Ki·ªÉm tra ng√¢n h√†ng th·ª• h∆∞·ªüng
            for (let bank of bankList) {
                if (!bin && text.includes(bank)) {
                    bin = bank;
                    console.log(`üè¶ T√¨m th·∫•y BIN: ${bin}`);
                    break;
                }
            }

            // Ki·ªÉm tra s·ªë t√†i kho·∫£n th·ª• h∆∞·ªüng (√≠t nh·∫•t 6 ch·ªØ s·ªë li√™n ti·∫øp)
            const accountMatch = text.match(/\b\d{6,}\b/);
            if (!account_number && accountMatch) {
                account_number = accountMatch[0];
                console.log(`üí≥ T√¨m th·∫•y S·ªë t√†i kho·∫£n: ${account_number}`);
            }

            // Ki·ªÉm tra s·ªë ti·ªÅn giao d·ªãch (s·ªë c√≥ d·∫•u ph·∫©y ho·∫∑c ch·∫•m)
            const amountMatch = text.match(/\b\d{1,3}([,\.]\d{3})*\b/);
            if (!amount && amountMatch) {
                amount = amountMatch[0];
                console.log(`üí∞ T√¨m th·∫•y S·ªë ti·ªÅn: ${amount}`);
            }
        }
    }

    traverse(obj);
    return { bin, account_number, amount };
}

// Ch·∫°y h√†m parseXML
console.log('üìÇ log xmlFilePath:', xmlFilePath);
console.log('üìÇ log jsonFilePath:', jsonFilePath);
parseXML();