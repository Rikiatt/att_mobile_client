const xml2js = require('xml2js');
const adb = require('adbkit');
const fs = require('fs');
const path = require('path');

const xmlFilePath = path.join(__dirname, 'logs', 'window_dump.xml');
const jsonFilePath = path.join(__dirname, 'database', 'info-qr-xml.json');

const jsonFilePath1 = path.join(__dirname, 'database', 'info-qr-xml.json');
const jsonFilePath2 = path.join(__dirname, 'database', 'info-qr.json');

// B·∫£ng √°nh x·∫° t√™n ng√¢n h√†ng sang m√£ BIN
const bankBinMap = {
    "Asia (ACB)": "970416",
    "Vietnam Foreign Trade (VCB)": "970436",
    "Technology and Trade (TCB)": "970407",
    "Investment and development (BIDV)": "970418",
    "Military (MB)": "970422",
    "NCB": "970419"
};

const checkXmlContentMB = async (localPath) => {
    try {
        const content = fs.readFileSync(localPath, "utf-8");
        
        const keywordsVI = [
            "S·ªë t√†i&#10;kho·∫£n", "S·ªë&#10;ƒëi·ªán tho·∫°i", "&#10;S·ªë th·∫ª",
            "Truy v·∫•n giao d·ªãch gi√° tr·ªã l·ªõn", "ƒê·ªëi t√°c MB", "Chuy·ªÉn ti·ªÅn"
        ];
        const keywordsEN = [
            "Account", "Phone number", "Card",
            "Large-value transaction inquiry", "MB partner", "Transfer"
        ];

        // N·∫øu ph√°t hi·ªán t·ª´ kh√≥a, tr·∫£ v·ªÅ true ngay l·∫≠p t·ª©c
        if (keywordsVI.every(kw => content.includes(kw)) || keywordsEN.every(kw => content.includes(kw))) {
            console.log("üö® Ph√°t hi·ªán n·ªôi dung nghi v·∫•n!");
            // handleAlert(differences.join("\n"), jsonFilePath1);
            console.log('stop app');
            console.log('sendTelegramAlert');
            console.log('saveAlertToDatabase');
            return true;
        }        

        const parsed = await xml2js.parseStringPromise(content, { explicitArray: false, mergeAttrs: true });
        const extractedData = extractNodes(parsed);

        if (extractedData.bin || extractedData.account_number || extractedData.amount) {
            fs.writeFileSync(jsonFilePath1, JSON.stringify(extractedData, null, 4), 'utf8');
            console.log("‚úÖ D·ªØ li·ªáu extract t·ª´ XML:", extractedData);

            // Ki·ªÉm tra s·ª± kh√°c bi·ªát gi·ªØa d·ªØ li·ªáu m·ªõi v√† d·ªØ li·ªáu c≈©
            if (!compareAndHandle(extractedData, jsonFilePath2)) return false;

            return true;
        }

        console.log("‚ö† Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu h·ª£p l·ªá trong XML.");
        return false;
    } catch (error) {
        console.error("‚ùå Got an error:", error.message);
        return false;
    }
}

function extractNodes(obj) {
    let bin = null, account_number = null, amount = null;
    const bankList = ["Asia (ACB)", "Vietnam Foreign Trade (VCB)", "Technology and Trade (TCB)", "Investment and development (BIDV)", "Military (MB)", "NCB"];
    let foundBank = false;
    let possibleAmounts = []; // Danh s√°ch s·ªë ti·ªÅn t√¨m th·∫•y
    let lastText = "";

    function traverse(node) {
        if (!node) return;

        if (typeof node === 'object') {
            for (let key in node) {
                traverse(node[key]); // ƒê·ªá quy v√†o c√°c node con
            }
        }

        if (typeof node === 'string') {
            let text = node.trim();

            // B·ªè qua d·ªØ li·ªáu kh√¥ng quan tr·ªçng
            if (!text || text === "false" || text === "true") return;

            console.log(`üîç Scanning: "${text}"`);

            // B·ªè qua t·ªça ƒë·ªô d·∫°ng [x,y][x,y]
            if (/\[\d+,\d+\]\[\d+,\d+\]/.test(text)) {
                console.log(`üö´ B·ªè qua t·ªça ƒë·ªô: ${text}`);
                return;
            }

            // T√¨m ng√¢n h√†ng th·ª• h∆∞·ªüng
            if (!bin) {
                for (let bank of bankList) {
                    if (text.includes(bank)) {
                        bin = bankBinMap[bank] || bank; // Chuy·ªÉn ƒë·ªïi sang m√£ BIN n·∫øu c√≥
                        foundBank = true;
                        console.log(`üè¶ T√¨m th·∫•y BIN: ${bin}`);
                        return;
                    }
                }
            }

            // T√¨m s·ªë t√†i kho·∫£n th·ª• h∆∞·ªüng
            if (foundBank && !account_number) {
                const accountMatch = text.match(/\b\d{6,}\b/);
                if (accountMatch) {
                    account_number = accountMatch[0]; // Kh√¥ng h·ªó tr·ª£ ƒë·ªãnh d·∫°ng c√≥ d·∫•u `-` ho·∫∑c `.`
                    console.log(`üí≥ T√¨m th·∫•y S·ªë t√†i kho·∫£n th·ª• h∆∞·ªüng: ${account_number}`);
                    foundBank = false; // Reset tr·∫°ng th√°i
                    return;
                }
            }

            // Ki·ªÉm tra s·ªë ti·ªÅn giao d·ªãch (∆∞u ti√™n s·ªë l·ªõn nh·∫•t)
            const amountMatch = text.match(/\b\d{1,3}([,.]\d{3})*\b/);
            if (amountMatch) {
                let extractedAmount = amountMatch[0].replace(/[,.]/g, ''); // Lo·∫°i b·ªè d·∫•u ph√¢n c√°ch ng√†n

                // B·ªè qua s·ªë d∆∞ t√†i kho·∫£n g·ª≠i (n·∫øu c√≥ nh√£n "PAYMENT ACCOUNT")
                if (lastText.includes("PAYMENT ACCOUNT")) {
                    console.log(`üö´ B·ªè qua s·ªë d∆∞ t√†i kho·∫£n g·ª≠i: ${extractedAmount}`);
                } else {
                    console.log(`üí∞ T√¨m th·∫•y s·ªë ti·ªÅn: ${extractedAmount}`);
                    possibleAmounts.push(parseInt(extractedAmount)); // L∆∞u v√†o danh s√°ch s·ªë ti·ªÅn
                }
            }

            lastText = text; // L∆∞u l·∫°i d√≤ng tr∆∞·ªõc ƒë·ªÉ ki·ªÉm tra
        }
    }

    traverse(obj);

    // Ch·ªçn s·ªë ti·ªÅn l·ªõn nh·∫•t v√¨ ƒë√≥ th∆∞·ªùng l√† s·ªë ti·ªÅn giao d·ªãch
    if (possibleAmounts.length > 0) {
        amount = Math.max(...possibleAmounts);
        console.log(`‚úÖ S·ªë ti·ªÅn giao d·ªãch ch√≠nh x√°c: ${amount}`);
    }

    return { bin, account_number, amount };
}

const compareAndHandle = (newData, jsonFilePath2) => {
    try {
        const oldData = JSON.parse(fs.readFileSync(jsonFilePath2, 'utf8')).data;

        let differences = [];
        
        // Ki·ªÉm tra s·ª± kh√°c bi·ªát t·ª´ng tr∆∞·ªùng d·ªØ li·ªáu
        if (newData.bin !== oldData.bin) {
            differences.push(`‚ö† Bin kh√°c bi·ªát: ${oldData.bin} ‚Üí ${newData.bin}`);
        }
        if (newData.account_number !== oldData.account_number) {
            differences.push(`‚ö† Account kh√°c bi·ªát: ${oldData.account_number} ‚Üí ${newData.account_number}`);
        }
        if (newData.amount !== oldData.amount) {
            differences.push(`‚ö† Amount kh√°c bi·ªát: ${oldData.amount} ‚Üí ${newData.amount}`);
        }

        // N·∫øu c√≥ b·∫•t k·ª≥ kh√°c bi·ªát n√†o, g·ª≠i c·∫£nh b√°o ngay l·∫≠p t·ª©c
        if (differences.length > 0) {
            console.log("‚ö† Ph√°t hi·ªán d·ªØ li·ªáu kh√°c bi·ªát:", differences.join(" | "));
            // handleAlert(differences.join("\n"), jsonFilePath1);
            console.log('stop app');
            console.log('sendTelegramAlert');
            console.log('saveAlertToDatabase');
            return false;
        }

        console.log("‚úÖ D·ªØ li·ªáu kh·ªõp nhau.");
        return true;
    } catch (error) {
        console.error("‚ùå L·ªói khi so s√°nh JSON:", error.message);
        return false;
    }
};

// const timestamp = Math.floor(Date.now() / 1000).toString();
const timestamp = 'window_dump';
const targetDir = path.join('C:\\att_mobile_client\\logs\\');
const localPath = path.join(targetDir, `${timestamp}.xml`);
checkXmlContentMB(localPath);
compareAndHandle();