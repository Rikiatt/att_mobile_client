require('dotenv').config();
const adb = require('adbkit');
const fs = require('fs');
const path = require('path');
const { delay } = require('../helpers/functionHelper');
const xml2js = require('xml2js');
const adbPath = path.join(__dirname, '../platform-tools', 'adb.exe');
const client = adb.createClient({ bin: adbPath });

const filePath = 'C:\\att_mobile_client\\database\\info-qr.json';
let chatId = '-4725254373'; // m·∫∑c ƒë·ªãnh l√† g·ª≠i v√†o nh√≥m Warning - Semi Automated Transfer
const telegramToken = '7884594856:AAEKZXIBH2IaROGR_k6Q49IP2kSt8uJ4wE0';
const { sendTelegramAlert } = require('../services/telegramService');
const { saveAlertToDatabase } = require('../controllers/alert.controller');
const jsonFilePath = "C:\\att_mobile_client\\database\\info-qr.json";

// ƒê·ªçc file config ƒë·ªÉ x√°c ƒë·ªãnh chatId ph√π h·ª£p
try {
    const fileContent = fs.readFileSync(filePath, 'utf-8');
    const jsonData = JSON.parse(fileContent);

    if (jsonData.data?.site === 'new88') {        
        // chatId = '-4607954489';
        chatId = '-4709837410'; // RIKI & BOT
    }
} catch (error) {
    console.error('‚ùå L·ªói khi ƒë·ªçc file info-qr.json:', error);
    return;
}

async function checkContentACB (device_id, localPath) {
    try {
        // ƒê·ªçc n·ªôi dung XML ƒë√£ dump ra
        const content = fs.readFileSync(localPath, "utf-8").trim();

        const screenKeywords = [                
            {
            name: "Chuy·ªÉn ti·ªÅn",
            vi: ["Chuy·ªÉn ti·ªÅn", "Chuy·ªÉn ti·ªÅn ƒë·∫øn", "T√†i kho·∫£n ng√¢n h√†ng", "Th·∫ª ng√¢n h√†ng", "CMND / H·ªô chi·∫øu", "S·ªë ƒëi·ªán tho·∫°i", "Danh s√°ch ng∆∞·ªùi nh·∫≠n", "Xem t·∫•t c·∫£"],
            en: ["Transfer", "Transfer to", "Bank account", "Bank card", "ID / Passport", "Cellphone number", "Beneficiary list", "View all"]
            }
        ];
  
        for (const screen of screenKeywords) {
            if (
                screen.vi.every(kw => content.includes(kw)) ||
                screen.en.every(kw => content.includes(kw))
            ) {
                console.log(`üö® C·∫£nh b√°o! Ph√°t hi·ªán c√≥ thao t√°c th·ªß c√¥ng khi xu·∫•t v·ªõi ACB ·ªü m√†n h√¨nh: ${screen.name} (id thi·∫øt b·ªã: ${device_id})`);
        
                console.log('ƒê√≥ng app ACB');
                await stopACB({ device_id });
        
                await sendTelegramAlert(
                    telegramToken,
                    chatId,
                    `üö® C·∫£nh b√°o! Ph√°t hi·ªán c√≥ thao t√°c th·ªß c√¥ng khi xu·∫•t v·ªõi ACB ·ªü m√†n h√¨nh: ${screen.name} (id thi·∫øt b·ªã: ${device_id})`
                );
        
                await saveAlertToDatabase({
                    timestamp: new Date().toISOString(),
                    reason: `Ph√°t hi·ªán c√≥ thao t√°c th·ªß c√¥ng khi xu·∫•t v·ªõi ACB ·ªü m√†n h√¨nh: ${screen.name} (id thi·∫øt b·ªã: ${device_id})`,
                    filePath: localPath
                });
        
                return;
            }
        }         
    } catch (error) {    
        console.error("‚ùå L·ªói x·ª≠ l√Ω XML:", error.message);
    }
}

async function checkContentEIB (device_id, localPath) {
    try {
      const content = fs.readFileSync(localPath, "utf-8").trim();
  
      // Ki·ªÉm tra hai resource-id ƒë·∫∑c tr∆∞ng c·ªßa m√†n h√¨nh c·∫ßn b·∫Øt
      const hasCollapsingToolbarMenuTransfer = content.includes('resource-id="com.vnpay.EximBankOmni:id/collapsingToolbarMenuTransfer"');
      const hasBtnMenuTransferAddForm = content.includes('resource-id="com.vnpay.EximBankOmni:id/btnMenuTransferAddForm"');
  
      if (hasCollapsingToolbarMenuTransfer && hasBtnMenuTransferAddForm) {
        const screenName = "Chuy·ªÉn ti·ªÅn";
  
        console.log(`üö® Ph√°t hi·ªán c√≥ thao t√°c th·ªß c√¥ng khi xu·∫•t v·ªõi EIB ·ªü m√†n h√¨nh: ${screenName}`);
  
        console.log('ƒê√≥ng app EIB');
        await stopEIB({ device_id });
  
        await sendTelegramAlert(
          telegramToken,
          chatId,
          `üö® C·∫£nh b√°o! Ph√°t hi·ªán c√≥ thao t√°c th·ªß c√¥ng khi xu·∫•t v·ªõi EIB ·ªü m√†n h√¨nh: ${screenName} (id thi·∫øt b·ªã: ${device_id})`
        );
  
        await saveAlertToDatabase({
          timestamp: new Date().toISOString(),
          reason: `Ph√°t hi·ªán c√≥ thao t√°c th·ªß c√¥ng khi xu·∫•t v·ªõi EIB ·ªü m√†n h√¨nh: ${screenName} (id thi·∫øt b·ªã: ${device_id})`,
          filePath: localPath
        });
  
        return;
      }
  
    } catch (error) {
      console.error("‚ùå L·ªói x·ª≠ l√Ω XML:", error.message);
    }
}

async function checkContentOCB (device_id, localPath) {
    try {        
        const content = fs.readFileSync(localPath, "utf-8").trim();
  
        const screenKeywords = [
            {
            name: "Chuy·ªÉn ti·ªÅn",
            vi: ["Chuy·ªÉn ti·ªÅn", "Trong OCB", "Ng√¢n h√†ng kh√°c", "ƒê·∫øn s·ªë th·∫ª", "Xem t·∫•t c·∫£", "Chuy·ªÉn g·∫ßn ƒë√¢y"],
            en: ["Transfer money", "Within OCB", "Interbank", "To card number", "See all", "Recent transferred"]
            }
        ];
    
        for (const screen of screenKeywords) {
            if (
                screen.vi.every(kw => content.includes(kw)) ||
                screen.en.every(kw => content.includes(kw))
            ) {
                console.log(`üö® C·∫£nh b√°o! Ph√°t hi·ªán c√≥ thao t√°c th·ªß c√¥ng khi xu·∫•t v·ªõi OCB ·ªü m√†n h√¨nh: ${screen.name} (id thi·∫øt b·ªã: ${device_id})`);        
        
                console.log('ƒê√≥ng app OCB');
                await stopOCB({ device_id });
        
                await sendTelegramAlert(
                    telegramToken,
                    chatId,
                    `üö® C·∫£nh b√°o! Ph√°t hi·ªán c√≥ thao t√°c th·ªß c√¥ng khi xu·∫•t v·ªõi OCB ·ªü m√†n h√¨nh: ${screen.name} (id thi·∫øt b·ªã: ${device_id})`
                );
        
                await saveAlertToDatabase({
                    timestamp: new Date().toISOString(),
                    reason: `Ph√°t hi·ªán c√≥ thao t√°c th·ªß c√¥ng khi xu·∫•t v·ªõi OCB ·ªü m√†n h√¨nh: ${screen.name} (id thi·∫øt b·ªã: ${device_id})`,
                    filePath: localPath
                });
        
                return;
            }
        }
    
        const parsed = await xml2js.parseStringPromise(content, { explicitArray: false, mergeAttrs: true });
        const extractedData = extractNodesOCB(parsed);    
    
        if (extractedData.bin && extractedData.account_number && extractedData.amount) {
            console.log("‚ö† XML c√≥ ch·ª©a d·ªØ li·ªáu giao d·ªãch: bin (bank name) account_number, amount. ƒêang so s√°nh trong info-qr.json.");      
    
            let jsonData = {};
            if (fs.existsSync(jsonFilePath)) {
                try {        
                    const rawData = fs.readFileSync(jsonFilePath, "utf8");
                    jsonData = JSON.parse(rawData).data || {};        
                } catch (error) {          
                    console.warn("‚ö† Kh√¥ng th·ªÉ ƒë·ªçc d·ªØ li·ªáu c≈©, ƒë·∫∑t v·ªÅ object r·ªóng.");
                    jsonData = {};          
                }
            }
    
            const differences = compareData(extractedData, jsonData);
            if (differences.length > 0) {
            console.log(`‚ö† D·ªØ li·ªáu giao d·ªãch thay ƒë·ªïi!\n${differences.join("\n")}`);
    
            console.log('ƒê√≥ng app OCB OMNI');
            await stopOCB ( { device_id } );          
    
            await sendTelegramAlert(
                telegramToken,
                chatId,
                `üö® C·∫£nh b√°o! Ph√°t hi·ªán c√≥ thay ƒë·ªïi d·ªØ li·ªáu giao d·ªãch khi xu·∫•t v·ªõi OCB (id thi·∫øt b·ªã: ${device_id})`
            );
    
            await saveAlertToDatabase({
                timestamp: new Date().toISOString(),
                reason: `Ph√°t hi·ªán c√≥ thay ƒë·ªïi d·ªØ li·ªáu giao d·ªãch khi xu·∫•t v·ªõi OCB (id thi·∫øt b·ªã: ${device_id})`,
                filePath: localPath 
            });
    
            return true;
            } else {
                console.log("‚úÖ D·ªØ li·ªáu giao d·ªãch KH√îNG thay ƒë·ªïi, b·ªè qua.");
                return false;
            }
        }   
    } catch (error) {    
        console.error("‚ùå L·ªói x·ª≠ l√Ω XML:", error.message);
    }
}

// ƒêo·∫°n n√†y c·∫ßn ph·∫£i s·ª≠a l·∫°i 1 ch√∫t
  // ƒêo·∫°n n√†y c·∫ßn ph·∫£i s·ª≠a l·∫°i 1 ch√∫t
  // ƒêo·∫°n n√†y c·∫ßn ph·∫£i s·ª≠a l·∫°i 1 ch√∫t
  // ƒêo·∫°n n√†y c·∫ßn ph·∫£i s·ª≠a l·∫°i 1 ch√∫t
  // ƒêo·∫°n n√†y c·∫ßn ph·∫£i s·ª≠a l·∫°i 1 ch√∫t
  // ƒêo·∫°n n√†y c·∫ßn ph·∫£i s·ª≠a l·∫°i 1 ch√∫t
  // ƒêo·∫°n n√†y c·∫ßn ph·∫£i s·ª≠a l·∫°i 1 ch√∫t
  // ƒêo·∫°n n√†y c·∫ßn ph·∫£i s·ª≠a l·∫°i 1 ch√∫t
  // ƒêo·∫°n n√†y c·∫ßn ph·∫£i s·ª≠a l·∫°i 1 ch√∫t
  // ƒêo·∫°n n√†y c·∫ßn ph·∫£i s·ª≠a l·∫°i 1 ch√∫t
  // ƒêo·∫°n n√†y c·∫ßn ph·∫£i s·ª≠a l·∫°i 1 ch√∫t
async function checkContentNAB (device_id, localPath) {
  try {
    const content = fs.readFileSync(localPath, "utf-8").trim();

    const screenKeywords = [
        {
            name: "Chuy·ªÉn ti·ªÅn",
            vi: ["T√†i kho·∫£n", "Th·∫ª", "Qu√©t QR", "Chuy·ªÉn ti·ªÅn qu·ªëc t·∫ø", "Danh b·∫° &#10; ng∆∞·ªùi nh·∫≠n", "Danh s√°ch &#10; l·ªãch chuy·ªÉn ti·ªÅn"],
            en: ["Account", "Card", "QR code", "International payments", "Danh b·∫° &#10; ng∆∞·ªùi nh·∫≠n", "Danh s√°ch &#10; l·ªãch chuy·ªÉn ti·ªÅn"]
        }
    ];    

    for (const screen of screenKeywords) {
        if (
            screen.vi.every(kw => content.includes(kw)) ||
            screen.en.every(kw => content.includes(kw))
        ) {
            console.log(`üö® Ph√°t hi·ªán c√≥ thao t√°c th·ªß c√¥ng khi xu·∫•t v·ªõi NAB ·ªü m√†n h√¨nh: ${screen.name}`);

            console.log('ƒê√≥ng app NAB');
            await stopNAB({ device_id });

            await sendTelegramAlert(
                telegramToken,
                chatId,
                `üö® C·∫£nh b√°o! Ph√°t hi·ªán c√≥ thao t√°c th·ªß c√¥ng khi xu·∫•t v·ªõi NAB ·ªü m√†n h√¨nh: ${screen.name} (${device_id})`
            );

            await saveAlertToDatabase({
                timestamp: new Date().toISOString(),
                reason: `Ph√°t hi·ªán c√≥ thao t√°c th·ªß c√¥ng khi xu·∫•t v·ªõi NAB ·ªü m√†n h√¨nh: ${screen.name} (id thi·∫øt b·ªã: ${device_id})`,
                filePath: localPath
            });

            return;
            }
        }   
    } 
    catch (error) {    
        console.error("‚ùå L·ªói x·ª≠ l√Ω XML:", error.message);
    }
}

// CH∆ØA TEST L·∫†I ƒê∆Ø·ª¢C, ƒêANG ƒê·ª¢I CH·ªä HIRA...
async function checkContentTPB (device_id, localPath) {
    try {
        const content = fs.readFileSync(localPath, "utf-8").trim();

        const screenKeywords = [
            {
                name: "Chuy·ªÉn ti·ªÅn/Chatpay",                
                vi: ["Chuy·ªÉn ti·ªÅn ChatPay", "Ng∆∞·ªùi Nh·∫≠n M·ªõi - Trong TPBank", "Ng∆∞·ªùi Nh·∫≠n M·ªõi - Li√™n Ng√¢n H√†ng/Th·∫ª", "D√°n Th√¥ng Tin Chuy·ªÉn Ti·ªÅn"],
                en: ["Chuy·ªÉn ti·ªÅn ChatPay", "Ng∆∞·ªùi Nh·∫≠n M·ªõi - Trong TPBank", "Ng∆∞·ªùi Nh·∫≠n M·ªõi - Li√™n Ng√¢n H√†ng/Th·∫ª", "D√°n Th√¥ng Tin Chuy·ªÉn Ti·ªÅn"] 
            },
            { // giao di·ªán n√†y n√≥ kh√¥ng cho dump
                name: "Chuy·ªÉn ti·ªÅn",                
                vi: ["Chuy·ªÉn ti·ªÅn", "T·ª´ t√†i kho·∫£n", "Chuy·ªÉn ƒë·∫øn", "Trong TPBank", "Li√™n Ng√¢n H√†ng", "Th·∫ª ATM"],
                en: ["Chuy·ªÉn ti·ªÅn", "T·ª´ t√†i kho·∫£n", "Chuy·ªÉn ƒë·∫øn", "Trong TPBank", "Li√™n Ng√¢n H√†ng", "Th·∫ª ATM"]
            }
        ];

        for (const screen of screenKeywords) {
            if (
                screen.vi.every(kw => content.includes(kw)) ||
                screen.en.every(kw => content.includes(kw))
            ) {
                console.log(`üö® Ph√°t hi·ªán c√≥ thao t√°c th·ªß c√¥ng khi xu·∫•t v·ªõi TPB ·ªü m√†n h√¨nh: ${screen.name}`);

                console.log('ƒê√≥ng app TPB');
                await stopTPB({ device_id });

                await sendTelegramAlert(
                    telegramToken,
                    chatId,
                    `üö® C·∫£nh b√°o! Ph√°t hi·ªán c√≥ thao t√°c th·ªß c√¥ng khi xu·∫•t v·ªõi TPB ·ªü m√†n h√¨nh: ${screen.name} (id thi·∫øt b·ªã: ${device_id})`
                );

                await saveAlertToDatabase({
                    timestamp: new Date().toISOString(),
                    reason: `Ph√°t hi·ªán c√≥ thao t√°c th·ªß c√¥ng khi xu·∫•t v·ªõi TPB ·ªü m√†n h√¨nh: ${screen.name} (id thi·∫øt b·ªã: ${device_id})`,
                    filePath: localPath
                });

                return;
            }
        }
        // scan QR xong >> chi co the edit duoc description => khong can extract data o day nua.           
    } catch (error) {    
        console.error("‚ùå L·ªói x·ª≠ l√Ω XML:", error.message);
    }
}

async function checkContentVPB (device_id, localPath) {
    try {    
        const content = fs.readFileSync(localPath, "utf-8").trim();

        const screenKeywords = [
            {
                name: "Chuy·ªÉn ti·ªÅn",
                vi: ["T·ªõi t√†i kho·∫£n", "T·ªõi th·∫ª", "T·ªõi t√†i kho·∫£n/&#10;th·∫ª c·ªßa t√¥i", "C·ªông ƒë·ªìng&#10;th·ªãnh v∆∞·ª£ng"],
                en: ["T·ªõi t√†i kho·∫£n", "T·ªõi th·∫ª", "T·ªõi t√†i kho·∫£n/&#10;th·∫ª c·ªßa t√¥i", "C·ªông ƒë·ªìng&#10;th·ªãnh v∆∞·ª£ng"]
            },

            {
                name: "Chuy·ªÉn ƒë·∫øn s·ªë t√†i kho·∫£n",
                vi: ["Chuy·ªÉn ƒë·∫øn s·ªë t√†i kho·∫£n", "T√†i kho·∫£n ngu·ªìn", "Th√¥ng tin ng∆∞·ªùi nh·∫≠n", "Ch·ªçn ng√¢n h√†ng"],
                en: ["Chuy·ªÉn ƒë·∫øn s·ªë t√†i kho·∫£n", "T√†i kho·∫£n ngu·ªìn", "Th√¥ng tin ng∆∞·ªùi nh·∫≠n", "Ch·ªçn ng√¢n h√†ng"]
            }
        ];

        for (const screen of screenKeywords) {
            if (
                screen.vi.every(kw => content.includes(kw)) ||
                screen.en.every(kw => content.includes(kw))
            ) {
                console.log(`üö® C·∫£nh b√°o! Ph√°t hi·ªán c√≥ thao t√°c th·ªß c√¥ng khi xu·∫•t v·ªõi VPB ·ªü m√†n h√¨nh: ${screen.name} (id thi·∫øt b·ªã: ${device_id})`);

                console.log('ƒê√≥ng app VPB');
                await stopVPB({ device_id });

                await sendTelegramAlert(
                telegramToken,
                chatId,
                `üö® C·∫£nh b√°o! Ph√°t hi·ªán c√≥ thao t√°c th·ªß c√¥ng khi xu·∫•t v·ªõi VPB ·ªü m√†n h√¨nh: ${screen.name} (id thi·∫øt b·ªã: ${device_id})`
                );

                await saveAlertToDatabase({
                timestamp: new Date().toISOString(),
                reason: `Ph√°t hi·ªán c√≥ thao t√°c th·ªß c√¥ng khi xu·∫•t v·ªõi VPB ·ªü m√†n h√¨nh: ${screen.name} (id thi·∫øt b·ªã: ${device_id})`,
                filePath: localPath
                });

                return;
            }
        }   
    } catch (error) {    
        console.error("‚ùå L·ªói x·ª≠ l√Ω XML:", error.message);
    }
}

async function checkContentMB(device_id, localPath) {
    try {
        const content = fs.readFileSync(localPath, "utf-8").trim();

        const screenKeywords = [{
            name: "Chuy·ªÉn ti·ªÅn",
            vi: ["S·ªë t√†i&#10;kho·∫£n", "S·ªë&#10;ƒëi·ªán tho·∫°i", "&#10;S·ªë th·∫ª", "Truy v·∫•n giao d·ªãch gi√° tr·ªã l·ªõn", "ƒê·ªëi t√°c MB", "Chuy·ªÉn ti·ªÅn"],
            en: ["Account", "Phone number", "Card", "Large-value transaction inquiry", "MB partner", "Transfer"]
        }];

        for (const screen of screenKeywords) {
            if (
                screen.vi.every(kw => content.includes(kw)) ||
                screen.en.every(kw => content.includes(kw))
            ) {
                console.log(`üö® Ph√°t hi·ªán c√≥ thao t√°c th·ªß c√¥ng khi xu·∫•t v·ªõi MB ·ªü m√†n h√¨nh: ${screen.name}`);

                console.log('ƒê√≥ng app MB');
                await stopMB({
                    device_id
                });

                await sendTelegramAlert(
                    telegramToken,
                    chatId,
                    `üö® C·∫£nh b√°o! Ph√°t hi·ªán c√≥ thao t√°c th·ªß c√¥ng khi xu·∫•t v·ªõi MB ·ªü m√†n h√¨nh: ${screen.name} (id thi·∫øt b·ªã: ${device_id})`
                );

                await saveAlertToDatabase({
                    timestamp: new Date().toISOString(),
                    reason: `Ph√°t hi·ªán c√≥ thao t√°c th·ªß c√¥ng khi xu·∫•t v·ªõi MB ·ªü m√†n h√¨nh: ${screen.name} (id thi·∫øt b·ªã: ${device_id})`,
                    filePath: localPath
                });

                return;
            }
        }

        const parsed = await xml2js.parseStringPromise(content, {
            explicitArray: false,
            mergeAttrs: true
        });
        const extractedData = extractNodesMB(parsed);

        if (extractedData.bin && extractedData.account_number && extractedData.amount) {
            console.log("‚ö† XML c√≥ ch·ª©a d·ªØ li·ªáu giao d·ªãch: bin (bank name) account_number, amount. ƒêang so s√°nh trong info-qr.json.");

            let jsonData = {};
            if (fs.existsSync(jsonFilePath)) {
                try {
                    const rawData = fs.readFileSync(jsonFilePath, "utf8");
                    jsonData = JSON.parse(rawData).data || {};
                } catch (error) {
                    console.warn("‚ö† Kh√¥ng th·ªÉ ƒë·ªçc d·ªØ li·ªáu c≈©, ƒë·∫∑t v·ªÅ object r·ªóng.");
                    jsonData = {};
                }
            }

            const differences = compareData(extractedData, jsonData);
            if (differences.length > 0) {
                console.log(`‚ö† D·ªØ li·ªáu giao d·ªãch thay ƒë·ªïi!\n${differences.join("\n")}`);

                console.log('D·ª´ng lu√¥n app MB Bank');
                await stopMB({
                    device_id
                });

                await sendTelegramAlert(
                    telegramToken,
                    chatId,
                    `üö® C·∫£nh b√°o! Ph√°t hi·ªán c√≥ thay ƒë·ªïi d·ªØ li·ªáu QR khi xu·∫•t v·ªõi MB (id thi·∫øt b·ªã: ${device_id})`
                );

                await saveAlertToDatabase({
                    timestamp: new Date().toISOString(),
                    reason: `Ph√°t hi·ªán c√≥ thay ƒë·ªïi d·ªØ li·ªáu QR khi xu·∫•t v·ªõi MB (id thi·∫øt b·ªã: ${device_id})`,
                    filePath: localPath
                });

                return true;
            } else {
                console.log("‚úÖ D·ªØ li·ªáu giao d·ªãch KH√îNG thay ƒë·ªïi, b·ªè qua.");
                return false;
            }
        }
    } catch (error) {
        console.error("‚ùå L·ªói x·ª≠ l√Ω XML:", error.message);
    }
}

function extractNodesOCB(obj) {
    let bin = null,
        account_number = null,
        amount = null;
    const bankList = [
        "ACB (Asia Commercial Bank)", "Ng√¢n h√†ng TMCP √Å Ch√¢u",
        "Vietcombank (Bank for Foreign Trade of Vietnam)", "Ng√¢n h√†ng TMCP Ngo·∫°i Th∆∞∆°ng Vi·ªát Nam",
        "Vietinbank (Vietnam Joint Stock Commercial Bank for Industry and Trade)", "Ng√¢n h√†ng TMCP C√¥ng Th∆∞∆°ng Vi·ªát Nam",
        "Techcombank (Vietnam Technological and Commercial Joint Stock Bank)", "Ng√¢n h√†ng TMCP K·ªπ Th∆∞∆°ng Vi·ªát Nam",
        "BIDV (Bank for Investment and Development of Vietnam)", "Ng√¢n h√†ng TMCP ƒê·∫ßu T∆∞ v√† Ph√°t Tri·ªÉn Vi·ªát Nam",
        "Military Commercial Joint Stock Bank", "Ng√¢n h√†ng TMCP Qu√¢n ƒê·ªôi",
        "National Citizen Bank", "Ng√¢n h√†ng TMCP Qu·ªëc D√¢n"
    ];

    let foundBank = false;
    let foundAccount = false;

    function traverse(node) {
        if (!node) return;

        if (typeof node === 'object') {
            for (let key in node) {
                traverse(node[key]);
            }
        }

        if (typeof node === 'string') {
            let text = node.trim();
            if (!text || text === "false" || text === "true") return;

            // 1Ô∏è‚É£ T√¨m ng√¢n h√†ng
            if (!bin) {
                for (let bank of bankList) {
                    if (text.includes(bank)) {
                        bin = bankBinMapOCB[bank] || bank;
                        foundBank = true;
                        return;
                    }
                }
            }

            // 2Ô∏è‚É£ T√¨m s·ªë t√†i kho·∫£n (ch·ªâ t√¨m sau khi ƒë√£ t√¨m th·∫•y ng√¢n h√†ng)
            if (foundBank && !account_number) {
                const accountMatch = text.match(/\b\d{6,}\b/); // T√¨m s·ªë t√†i kho·∫£n (√≠t nh·∫•t 6 s·ªë)
                if (accountMatch) {
                    account_number = accountMatch[0];
                    foundAccount = true;
                    console.log(`üí≥ T√¨m th·∫•y s·ªë t√†i kho·∫£n: ${account_number}`);
                    return;
                }
            }
        }

        // 3Ô∏è‚É£ L·∫•y s·ªë ti·ªÅn t·ª´ ƒë√∫ng th·∫ª c√≥ resource-id="vn.com.ocb.awe:id/edtInput"
        if (typeof node === 'object' && node['resource-id'] === 'vn.com.ocb.awe:id/edtInput' && node.text) {
            amount = parseInt(node.text.replace(/,/g, ''), 10);
        }
    }

    traverse(obj);
    return {
        bin,
        account_number,
        amount
    };
}

function extractNodesMB(obj) {
    let bin = null,
        account_number = null,
        amount = null;
    const bankList = [
        "Asia (ACB)", "√Å Ch√¢u (ACB)",
        "Vietnam Foreign Trade (VCB)", "Ngo·∫°i th∆∞∆°ng Vi·ªát Nam (VCB)",
        "Vietnam Industry and Trade (VIETINBANK)", "C√¥ng Th∆∞∆°ng Vi·ªát Nam (VIETINBANK)",
        "Technology and Trade (TCB)", "K·ªπ Th∆∞∆°ng (TCB)",
        "Investment and development (BIDV)", "ƒê·∫ßu t∆∞ v√† ph√°t tri·ªÉn (BIDV)",
        "Military (MB)", "Qu√¢n ƒë·ªôi (MB)",
        "NCB", "Qu·ªëc D√¢n (NCB)"
    ];

    let foundBank = false;
    let foundAccount = false;
    let maxAmount = 0;

    function traverse(node) {
        if (!node) return;

        if (typeof node === 'object') {
            for (let key in node) {
                traverse(node[key]);
            }
        }

        if (typeof node === 'string') {
            let text = node.trim();
            if (!text || text === "false" || text === "true") return;

            // 1Ô∏è‚É£ T√¨m ng√¢n h√†ng tr∆∞·ªõc
            if (!bin) {
                for (let bank of bankList) {
                    if (text.includes(bank)) {
                        bin = bankBinMapMB[bank] || bank;
                        foundBank = true;
                        return;
                    }
                }
            }

            // 2Ô∏è‚É£ T√¨m s·ªë t√†i kho·∫£n (ch·ªâ t√¨m sau khi ƒë√£ t√¨m th·∫•y ng√¢n h√†ng)
            if (foundBank && !account_number) {
                const accountMatch = text.match(/\b\d{6,}\b/); // T√¨m s·ªë t√†i kho·∫£n (√≠t nh·∫•t 6 s·ªë)
                if (accountMatch) {
                    account_number = accountMatch[0];
                    foundAccount = true;
                    return;
                }
            }

            // 3Ô∏è‚É£ T√¨m s·ªë ti·ªÅn giao d·ªãch l·ªõn nh·∫•t
            const amountMatch = text.match(/^\d{1,3}(?:,\d{3})*$/);
            if (amountMatch) {
                let extractedAmount = parseInt(amountMatch[0].replace(/,/g, ''), 10); // B·ªè d·∫•u `,` v√† convert th√†nh s·ªë
                if (extractedAmount > maxAmount) {
                    maxAmount = extractedAmount;
                }
            }
        }
    }

    traverse(obj);
    amount = maxAmount;

    return {
        bin,
        account_number,
        amount
    };
}

// B·∫£ng √°nh x·∫° t√™n ng√¢n h√†ng sang m√£ BIN khi d√πng OCB
const bankBinMapOCB = {
    "Asia (ACB)": "970416",
    "Vietnam Foreign Trade (VCB)": "970436",
    "Vietinbank (Vietnam Joint Stock Commercial Bank for Industry and Trade)": "970415", "Ng√¢n h√†ng TMCP C√¥ng Th∆∞∆°ng Vi·ªát Nam": "970415",  
    "Technology and Trade (TCB)": "970407",
    "Investment and development (BIDV)": "970418", "Ng√¢n h√†ng TMCP ƒê·∫ßu T∆∞ v√† Ph√°t Tri·ªÉn Vi·ªát Nam": "970418",
    "Military (MB)": "970422", "Ng√¢n h√†ng TMCP Qu√¢n ƒê·ªôi": "970422",
    "NCB": "970419", "Ng√¢n h√†ng TMCP Qu·ªëc D√¢n": "970419"  
}

// B·∫£ng √°nh x·∫° t√™n ng√¢n h√†ng sang m√£ BIN khi d√πng MB Bank
const bankBinMapMB = {
    "Asia (ACB)": "970416",
    "Vietnam Foreign Trade (VCB)": "970436",
    "Vietnam Industry and Trade (VIETINBANK)": "970415",
    "Technology and Trade (TCB)": "970407",
    "Investment and development (BIDV)": "970418",
    "Military (MB)": "970422",
    "NCB": "970419",
    
    "√Å Ch√¢u (ACB)": "970416",
    "Ngo·∫°i th∆∞∆°ng Vi·ªát Nam (VCB)": "970436",
    "C√¥ng Th∆∞∆°ng Vi·ªát Nam (VIETINBANK)": "970415",
    "K·ªπ Th∆∞∆°ng (TCB)": "970407",
    "ƒê·∫ßu t∆∞ v√† ph√°t tri·ªÉn (BIDV)": "970418",
    "Qu√¢n ƒë·ªôi (MB)": "970422",
    "Qu·ªëc D√¢n (NCB)": "970419"
}

const compareData = (xmlData, jsonData) => {
    let differences = [];
    if (xmlData.bin !== jsonData.bin) differences.push(`BIN kh√°c: XML(${xmlData.bin}) ‚â† JSON(${jsonData.bin})`);
    if (xmlData.account_number !== String(jsonData.account_number)) differences.push(`S·ªë t√†i kho·∫£n kh√°c: XML(${xmlData.account_number}) ‚â† JSON(${jsonData.account_number})`);
    if (Number(xmlData.amount) !== Number(jsonData.amount)) differences.push(`S·ªë ti·ªÅn kh√°c: XML(${xmlData.amount}) ‚â† JSON(${jsonData.amount})`);
    return differences;
}

async function stopACB ({ device_id }) {    
    await client.shell(device_id, 'am force-stop mobile.acb.com.vn');
    console.log('ƒê√£ d·ª´ng app ACB');
    await delay(500);
    return { status: 200, message: 'Success' };
}

async function stopEIB ({ device_id }) {    
    await client.shell(device_id, 'am force-stop com.vnpay.EximBankOmni');
    console.log('ƒê√£ d·ª´ng EIB');
    await delay(500);
    return { status: 200, message: 'Success' };
}

async function stopOCB ({ device_id }) {    
  await client.shell(device_id, 'am force-stop vn.com.ocb.awe');
  console.log('ƒê√£ d·ª´ng app OCB OMNI');
  await delay(500);
  return { status: 200, message: 'Success' };
}

async function stopNAB ({ device_id }) {    
    await client.shell(device_id, 'input keyevent 3');
    await client.shell(device_id, 'am force-stop ops.namabank.com.vn');
    console.log('D·ª´ng lu√¥n app NAB');
    await delay(500);
    return { status: 200, message: 'Success' };
}

async function stopTPB ({ device_id }) {    
    await client.shell(device_id, 'input keyevent 3');
    await client.shell(device_id, 'am force-stop com.tpb.mb.gprsandroid');
    console.log('D·ª´ng lu√¥n app TPB');
    await delay(500);
    return { status: 200, message: 'Success' };
}

async function stopVPB ({ device_id }) {    
    await client.shell(device_id, 'input keyevent 3');
    await client.shell(device_id, 'am force-stop com.vnpay.vpbankonline');
    console.log('D·ª´ng lu√¥n app VPB');
    await delay(500);
    return { status: 200, message: 'Success' };
}

async function stopMB ({ device_id }) {    
    await client.shell(device_id, 'am force-stop com.mbmobile');
    console.log('ƒê√£ d·ª´ng app MB');
    await delay(500);
    return { status: 200, message: 'Success' };
}

module.exports = { checkContentACB, checkContentEIB, checkContentOCB, checkContentNAB, checkContentTPB, checkContentVPB, checkContentMB }